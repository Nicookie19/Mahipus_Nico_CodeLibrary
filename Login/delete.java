/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Login;

import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Vector;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

public class delete extends javax.swing.JFrame {

    private static String filepath2 = "E:\\Downloads\\Login\\src\\Login\\users.json";

    public delete() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        javax.swing.JButton homebot = new javax.swing.JButton();
        javax.swing.JButton deletebot = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(106, 156, 137));

        table.setBackground(new java.awt.Color(193, 216, 195));
        table.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        table.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Password"
            }
        ));
        jScrollPane1.setViewportView(table);

        homebot.setBackground(new java.awt.Color(255, 218, 179));
        homebot.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        homebot.setForeground(new java.awt.Color(102, 102, 102));
        homebot.setText("Home");
        homebot.setToolTipText("");
        homebot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homebotActionPerformed(evt);
            }
        });

        deletebot.setBackground(new java.awt.Color(255, 218, 179));
        deletebot.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        deletebot.setForeground(new java.awt.Color(102, 102, 102));
        deletebot.setText("Delete");
        deletebot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(deletebot)
                .addGap(164, 164, 164)
                .addComponent(homebot)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deletebot, homebot});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletebot)
                    .addComponent(homebot))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deletebot, homebot});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deletebotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebotActionPerformed
        int row = table.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected! Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.removeRow(row);
            saveJsonData();
        }
    }//GEN-LAST:event_deletebotActionPerformed
//this button is use to fire back to welcome window
    private void homebotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homebotActionPerformed
        welcome well = new welcome();
        well.setVisible(true);
        well.pack();
        well.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_homebotActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveJsonData();

    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadJsonData();
    }//GEN-LAST:event_formWindowOpened

    private void loadJsonData() {
        JSONParser parser = new JSONParser();
        try (FileReader reader = new FileReader(filepath2)) {
            Object obj = parser.parse(reader);
            if (obj instanceof JSONObject) {
                JSONObject jsonObject = (JSONObject) obj;
                JSONArray usersArray = (JSONArray) jsonObject.get("users");
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                if (usersArray != null) {
                    for (Object userObj : usersArray) {
                        JSONObject userObject = (JSONObject) userObj;
                        String user = (String) userObject.get("user");
                        String password = (String) userObject.get("password");
                        model.addRow(new Object[]{user, password});
                    }
                }
            }
        } catch (IOException | ParseException e) {
            System.err.println("Error loading JSON data: " + e.getMessage());
        }
    }

    private void saveJsonData() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        JSONArray usersArray = new JSONArray();
        for (int i = 0; i < model.getRowCount(); i++) {
            JSONObject userObject = new JSONObject();
            userObject.put("user", model.getValueAt(i, 0));
            userObject.put("password", model.getValueAt(i, 1));
            usersArray.add(userObject);
        }
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("users", usersArray);
        try (FileWriter file = new FileWriter(filepath2)) {
            file.write(jsonObject.toJSONString());
            file.flush();
        } catch (IOException e) {
            System.err.println("Error saving JSON data: " + e.getMessage());
        }
    }

    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new delete().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
